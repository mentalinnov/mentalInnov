{"ast":null,"code":"var _jsxFileName = \"/Users/Jadsaliba/Documents/GitHub/mentalInnov/mentalInnov/Frontend/src/components/chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { userMessage, sendMessage } from \"../../actions/watson\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { db } from \"../../firebase\";\nimport { collection, addDoc, doc, updateDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = _ref => {\n  _s();\n\n  let {\n    chat,\n    userMessage,\n    sendMessage\n  } = _ref;\n  // Handle Users Message\n  const [message, setMessage] = useState(\"\");\n  const endOfMessages = useRef(null);\n  const {\n    currentUser\n  } = useAuth();\n  let id = '';\n  let chatHistory = '';\n  let lastMessage = ''; // const scrollToBottom = () => {\n  //   endOfMessages.current.scrollIntoView({ behavior: \"smooth\" });\n  //   console.log(\"user: \", currentUser.email)\n  //   console.log(\"last chat: \", chat[chat.length - 1])\n  // };\n  // useEffect(scrollToBottom, [chat]);\n  //  Function that handles user submission\n\n  const handleClick = async (e, chat) => {\n    const code = e.keyCode || e.which;\n\n    if (code === 13) {\n      userMessage(message);\n      sendMessage(message);\n      setMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    const saveChatToDB = async () => {\n      const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get();\n      snapshot.forEach(doc => {\n        id = doc.id;\n        chatHistory = doc.data().chatHistory;\n      });\n      const userDoc = doc(db, \"accounts\", id);\n\n      if (chat[chat.length - 1]) {\n        const newFields = {\n          chatHistory: chatHistory + \"\\n\" + chat[chat.length - 1].type + \": \" + chat[chat.length - 1].message\n        };\n        await updateDoc(userDoc, newFields);\n      }\n    };\n\n    const scrollToBottom = () => {\n      endOfMessages.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    saveChatToDB();\n    scrollToBottom();\n  }, [chat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mental health chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"historyContainer\",\n      children: [chat.length === 0 ? \"\" : chat.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.type,\n        children: msg.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 31\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"chatBox\",\n      onChange: e => setMessage(e.target.value),\n      onKeyPress: handleClick,\n      value: message,\n      placeholder: \"Please type your message here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"t/zdBSmqULNDlGZrfk2UJUwgR00=\", false, function () {\n  return [useAuth];\n});\n\n_c = Chat;\n\nconst mapStateToProps = state => ({\n  chat: state.watson.messages\n});\n\nexport default connect(mapStateToProps, {\n  userMessage,\n  sendMessage\n})(Chat);\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/Jadsaliba/Documents/GitHub/mentalInnov/mentalInnov/Frontend/src/components/chat/Chat.js"],"names":["React","useState","useEffect","useRef","Button","connect","userMessage","sendMessage","useAuth","db","collection","addDoc","doc","updateDoc","Chat","chat","message","setMessage","endOfMessages","currentUser","id","chatHistory","lastMessage","handleClick","e","code","keyCode","which","saveChatToDB","snapshot","where","email","get","forEach","data","userDoc","length","newFields","type","scrollToBottom","current","scrollIntoView","behavior","map","msg","target","value","mapStateToProps","state","watson","messages"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\"\nimport { connect } from \"react-redux\";\nimport { userMessage, sendMessage } from \"../../actions/watson\";\nimport { useAuth } from \"../../contexts/AuthContext\"\nimport { db } from \"../../firebase\";\nimport {\n  collection,\n  addDoc,\n  doc,\n  updateDoc\n} from \"firebase/firestore\";\n\nconst Chat = ({ chat, userMessage, sendMessage }) => {\n  // Handle Users Message\n  const [message, setMessage] = useState(\"\");\n  const endOfMessages = useRef(null);\n  const { currentUser } = useAuth();\n  let id = '';\n  let chatHistory = '';\n  let lastMessage = '';\n\n  // const scrollToBottom = () => {\n  //   endOfMessages.current.scrollIntoView({ behavior: \"smooth\" });\n  //   console.log(\"user: \", currentUser.email)\n  //   console.log(\"last chat: \", chat[chat.length - 1])\n  // };\n  // useEffect(scrollToBottom, [chat]);\n\n  //  Function that handles user submission\n  const handleClick = async (e, chat) => {\n    const code = e.keyCode || e.which;    \n    if (code === 13) {\n      userMessage(message);\n      sendMessage(message);\n      setMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    const saveChatToDB = async () => {\n      const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get()\n      snapshot.forEach(doc => {\n        id = doc.id\n        chatHistory = doc.data().chatHistory\n      });\n      const userDoc = doc(db, \"accounts\", id);\n      if (chat[chat.length - 1]){\n        const newFields = { chatHistory: \n                            chatHistory + \"\\n\"\n                            + chat[chat.length - 1].type + \": \" + chat[chat.length - 1].message};\n        await updateDoc(userDoc, newFields);\n      }\n    };\n\n    const scrollToBottom = () => {\n      endOfMessages.current.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    saveChatToDB();\n    scrollToBottom();\n  }, [chat]);\n\n  return (\n    <div className=\"chat\">\n      <h1>Mental health chatbot</h1>\n\n      <div class=\"historyContainer\">\n        {chat.length === 0\n          ? \"\"\n          : chat.map((msg) => <div className={msg.type}>{msg.message}</div>)}\n        <div ref={endOfMessages}></div>\n\n      </div>\n\n      <input\n        id=\"chatBox\"\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={handleClick}\n        value={message}\n        placeholder=\"Please type your message here...\">\n      </input>      \n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  chat: state.watson.messages,\n});\n\nexport default connect(mapStateToProps, { userMessage, sendMessage })(Chat);\n"]},"metadata":{},"sourceType":"module"}