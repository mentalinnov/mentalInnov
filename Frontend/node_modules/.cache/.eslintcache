[{"/var/www/mentalInnov/Frontend/src/index.js":"1","/var/www/mentalInnov/Frontend/src/components/App.js":"2","/var/www/mentalInnov/Frontend/src/components/Signup.js":"3","/var/www/mentalInnov/Frontend/src/components/Dashboard.js":"4","/var/www/mentalInnov/Frontend/src/components/Login.js":"5","/var/www/mentalInnov/Frontend/src/components/PrivateRoute.js":"6","/var/www/mentalInnov/Frontend/src/components/ForgotPassword.js":"7","/var/www/mentalInnov/Frontend/src/contexts/AuthContext.js":"8","/var/www/mentalInnov/Frontend/src/firebase.js":"9","/var/www/mentalInnov/Frontend/src/store.js":"10","/var/www/mentalInnov/Frontend/src/components/chat/Chat.js":"11","/var/www/mentalInnov/Frontend/src/actions/watson.js":"12","/var/www/mentalInnov/Frontend/src/actions/types.js":"13","/var/www/mentalInnov/Frontend/src/reducers/index.js":"14","/var/www/mentalInnov/Frontend/src/reducers/watson.js":"15"},{"size":301,"mtime":1647579320124,"results":"16","hashOfConfig":"17"},{"size":1037,"mtime":1647579320124,"results":"18","hashOfConfig":"17"},{"size":3263,"mtime":1647579320124,"results":"19","hashOfConfig":"17"},{"size":9167,"mtime":1647579320124,"results":"20","hashOfConfig":"17"},{"size":2218,"mtime":1647931665564,"results":"21","hashOfConfig":"17"},{"size":412,"mtime":1647579320124,"results":"22","hashOfConfig":"17"},{"size":1655,"mtime":1647579320124,"results":"23","hashOfConfig":"17"},{"size":1280,"mtime":1647579320124,"results":"24","hashOfConfig":"17"},{"size":659,"mtime":1647579320124,"results":"25","hashOfConfig":"17"},{"size":390,"mtime":1647579320124,"results":"26","hashOfConfig":"17"},{"size":2588,"mtime":1647579320124,"results":"27","hashOfConfig":"17"},{"size":1103,"mtime":1647579320124,"results":"28","hashOfConfig":"17"},{"size":274,"mtime":1647579320124,"results":"29","hashOfConfig":"17"},{"size":117,"mtime":1647579320124,"results":"30","hashOfConfig":"17"},{"size":1064,"mtime":1647579320124,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1aloqdb",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"/var/www/mentalInnov/Frontend/src/index.js",[],"/var/www/mentalInnov/Frontend/src/components/App.js",[],"/var/www/mentalInnov/Frontend/src/components/Signup.js",[],"/var/www/mentalInnov/Frontend/src/components/Dashboard.js",["66","67","68","69"],"import React, { useState, useEffect } from \"react\"\nimport { Row, Container, Button, Alert } from \"react-bootstrap\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport { useHistory } from \"react-router-dom\"\nimport { Provider } from \"react-redux\";\nimport axios from \"axios\";\nimport { Web3Storage, File } from 'web3.storage/dist/bundle.esm.min.js'\nimport algosdk from 'algosdk'\nimport { useTimer } from 'react-timer-hook';\nimport { saveAs } from 'file-saver';\nimport store from \"../store\";\nimport Chat from \"./chat/Chat\";\nimport { createSession } from \"../actions/watson\";\nimport { db } from \"../firebase\";\nimport {\n  doc,\n  updateDoc\n} from \"firebase/firestore\";\nimport \"../css/Dashboard.css\";\n\nif (localStorage.getItem(\"session\")) {\n  delete axios.defaults.headers.common[\"session_id\"];\n  axios.defaults.headers.common[\"session_id\"] = localStorage.getItem(\"session\");\n}\nelse {\n  delete axios.defaults.headers.common[\"session_id\"];\n}\n\nconst token = process.env.REACT_APP_WEB3_STORAGE_TOKEN\nconst client = new Web3Storage({ token })\n\n// wallet details\nconst recoveredAccount = algosdk.mnemonicToSecretKey(process.env.REACT_APP_PASSPHRASE);\n\n// setup algod\nconst baseServer = process.env.REACT_APP_ALGO_SERVER;\nconst port = '';\nconst purestakeToken = {\n   'X-API-Key': process.env.REACT_APP_PURESTAKE_API_KEY\n}\nconst algodClient = new algosdk.Algodv2(purestakeToken, baseServer, port);\nconst account = {\n    addr: process.env.REACT_APP_WALLET_ADDRESS,\n    sk: new Uint8Array(process.env.REACT_APP_SK.split(','))\n  }\n\nexport default function Dashboard() {\n  const [loadingSave, setLoadingSave] = useState(false)\n  const [loadingDownload, setLoadingDownload] = useState(false)\n  const [showTimerWarning, setShowTimerWarning] = useState(false);\n  const [timerExpired, setTimerExpired] = useState(false);\n  const [error, setError] = useState(\"\")\n  const { currentUser, logout } = useAuth()\n  const history = useHistory()\n  var id = ''\n  var fname = ''\n  var lname = ''\n  var address = ''\n  var email = ''\n  var cidDB = ''\n  var chatHistory = ''\n\n  // set initial timer on page load: 5 mins == 300 seconds\n  // watson assistant chat session currently lasts 5 mins on the free version \n  // so need to retrieve a new session ID every 5 minutes\n  var time = new Date();\n  time.setSeconds(time.getSeconds() + 300);\n\n  useEffect(() => {\n    // if 5 mins passed\n    if (timerExpired) {\n      // create new session ID\n      store.dispatch(createSession());\n      // reset timer\n      setTimerExpired(false)\n      time = new Date();\n      time.setSeconds(time.getSeconds() + 300);\n      setShowTimerWarning(true)\n    }\n  });\n\n  function MyTimer({ expiryTimestamp }) {\n    const {\n      seconds,\n    } = useTimer({ expiryTimestamp, onExpire: () => setTimerExpired(true) });\n  \n    return (\n      <div style={{textAlign: 'center'}}>\n\n      </div>\n    );\n  }\n\n  async function handleLogout() {\n    setError(\"\")\n    try {\n      await logout()\n      history.push(\"/login\")\n    } catch {\n      setError(\"Failed to log out\")\n    }\n  }\n\n  async function downloadUserDetails() {\n    // Get user details from DB\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get()\n    snapshot.forEach(doc => {\n      id = doc.id\n      fname = doc.data().first_name\n      lname = doc.data().last_name\n      address = doc.data().address\n      email = doc.data().email\n    });\n    // Create user details file\n    var userDetails = new Blob([`First Name: ${fname}, Last Name: ${lname}, Address: ${address}`], {\n      type: \"text/plain;charset=utf-8;\",\n    });\n    // Download user details file\n    saveAs(userDetails, \"userDetails.txt\");\n  }\n\n  async function createChatHistoryFile() {\n    // Get chat history from DB\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get()\n    snapshot.forEach(doc => {\n      id = doc.id\n      chatHistory = doc.data().chatHistory\n    });\n    // Create chat history file\n    const buffer = Buffer.from(chatHistory);\n    const files = [\n      new File([buffer], 'chatHistory.txt')\n    ]\n    return files\n  }\n\n  async function saveToAlgorand() {\n    setLoadingSave(true)\n    // Push file to IPFS via web3storage\n    const file = await createChatHistoryFile()\n    const cid = await client.put(file)\n    console.log(\"File CID:\", cid)\n\n    // Save cid as a note to send with transaction\n    const fileMetadata = {\n      cid: `${cid}`,\n      filename: './chatHistory.txt'\n    }\n    let note = algosdk.encodeObj(fileMetadata)\n\n    // Fill cid field of user in DB\n    const userDoc = doc(db, \"accounts\", id);\n    const newFields = { cid: cid};\n    await updateDoc(userDoc, newFields);\n\n    // Transaction to self with transaction note containing CID\n    let params = await algodClient.getTransactionParams().do()\n    params.fee = 1000\n    params.flatFee = true\n    let txn = algosdk.makePaymentTxnWithSuggestedParams(\n                        process.env.REACT_APP_WALLET_ADDRESS, \n                        process.env.REACT_APP_WALLET_ADDRESS, \n                        0, \n                        undefined,\n                        note, \n                        params)\n\n    // Sign & send transaction\n    let signedTxn = txn.signTxn(recoveredAccount.sk)\n    let txId = txn.txID().toString()\n    console.log(\"Signed transaction with txID: %s\", txId)\n    await algodClient.sendRawTransaction(signedTxn).do()\n\n    // Confirmation\n    let status = await algodClient.status().do()\n    let lastRound = status[\"last-round\"]\n    while (true) {\n      const pendingInfo = await algodClient.pendingTransactionInformation(txId).do()\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"])\n        break\n      }\n      lastRound++\n      await algodClient.statusAfterBlock(lastRound).do()\n    }\n\n    // Read transaction from Algorand\n    let confirmedTxn = await algodClient.pendingTransactionInformation(txId).do()\n    console.log(\"Transaction information: %o\", confirmedTxn.txn.txn)\n    console.log(\"Decoded note: %s\", algosdk.decodeObj(confirmedTxn.txn.txn.note))\n    console.log('File push complete!')\n\n    setLoadingSave(false)\n  }\n\n  async function downloadFromAlgorand() {\n    setLoadingDownload(true)\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get()\n    snapshot.forEach(doc => {\n      cidDB = doc.data().cid\n    });\n\n    // Get file from IPFS\n    const res = await client.get(cidDB)\n    const files = await res.files()\n    console.log(`IPFS url: https://${cidDB}.ipfs.dweb.link`)\n    console.log(\"Displaying files in IPFS storage:\")\n    for (const file of files) {\n      console.log(`${file.cid}: ${file.name} (${file.size} bytes)`)\n    }\n    // Download File\n    fetch(`https://${cidDB}.ipfs.dweb.link/chatHistory.txt`)\n      .then(response => {\n          response.blob().then(blob => {\n              let url = window.URL.createObjectURL(blob);\n              let a = document.createElement('a');\n              a.href = url;\n              a.download = 'chatHistory.txt';\n              a.click();\n          });\n    });\n    setLoadingDownload(false)\n  }\n\n  return (\n    <Container className=\"fixed-top \">\n      {error && <Alert variant=\"danger\">{error}</Alert>}\n      \n      <Provider store={store}>\n        {/* <h2 className=\"text-right mr-3 mt-3\" style={{fontSize:\"22px\"}}> {currentUser.email}</h2>  */}\n        {/* show alert for session time */}\n        <Alert className=\"text-center align-items-center\" show={showTimerWarning} variant='warning'> \n            5 minutes have passed, a new session has been created!\n        </Alert>\n        <Alert className=\"text-center align-items-center\" show={!showTimerWarning} variant='warning'> \n            Important: chatbot sessions currently only last for 5 minutes. After that, a new session will be created.\n        </Alert>\n        {/* run timer */}\n        <div>\n          <MyTimer expiryTimestamp={time} />\n        </div>\n\n        {/* Chat container */}\n        <div className=\"container\">\n          <Chat />\n        </div>\n        \n        {/* Save & Download buttons */}\n        <Row className=\"align-items-right\" style={{display:'flex', justifyContent:'right'}}> \n          <div className=\" text-right mr-3 mt-3\">\n            <Button variant=\"outline-primary\" onClick={downloadUserDetails}>\n              Download user details\n            </Button>\n          </div>\n          <div className=\" text-right mr-3 mt-3\">\n            <Button disabled={loadingSave} variant=\"outline-primary\" onClick={saveToAlgorand}>\n              Save chat to Algorand\n            </Button>\n          </div>\n          <div className=\" text-right mr-3 mt-3\">\n            <Button disabled={loadingDownload} variant=\"outline-primary\" onClick={downloadFromAlgorand}>\n              Download chat from Algorand\n            </Button>\n          </div>\n          <div className=\"text-right mr-3 mt-3\">\n            <Button variant=\"outline-danger\" onClick={handleLogout}>\n              Log Out\n            </Button>\n          </div>\n        </Row>\n      </Provider>\n    </Container>  \n  )\n}\n","/var/www/mentalInnov/Frontend/src/components/Login.js",["70","71"],"import React, { useRef, useState } from \"react\"\nimport { Form, Button, Card, Alert } from \"react-bootstrap\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport store from \"../store\";\nimport { createSession } from \"../actions/watson\";\n\nexport default function Login() {\n  const emailRef = useRef()\n  const passwordRef = useRef()\n  const { login } = useAuth()\n  const [error, setError] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const history = useHistory()\n  var id = ''\n\n  async function handleSubmit(e) {\n    e.preventDefault()\n\n    try {\n      setError(\"\")\n      setLoading(true)\n      await login(emailRef.current.value, passwordRef.current.value)\n      store.dispatch(createSession());\n      history.push(\"/\")\n    } catch {\n      setError(\"Failed to log in\")\n    }\n\n    setLoading(false)\n  }\n\n  return (\n    <>\n      <h2 className=\"fixed-top text-center mb-4 mt-4\">Welcome to AI Mental Health Chatbot! </h2>\n      <p className=\"text-center\">Powered by Algorand</p>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Please log in to access</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <Button disabled={loading} className=\"w-100 outline-primary\" type=\"submit\">\n              Log In\n            </Button>\n          </Form>\n          <div className=\"w-100 text-center mt-3\">\n            <Link to=\"/forgot-password\">Forgot Password?</Link>\n          </div>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Need an account? <Link to=\"/signup\">Sign Up</Link>\n      </div>\n      <div className=\"w-100 text-center mt-2\">\n        Back to <a href=\"https://aisenses.co\" class=\"link-success\" target=\"_blank\">Home</a>\n      </div>\n    </>\n  )\n}\n","/var/www/mentalInnov/Frontend/src/components/PrivateRoute.js",[],"/var/www/mentalInnov/Frontend/src/components/ForgotPassword.js",[],"/var/www/mentalInnov/Frontend/src/contexts/AuthContext.js",[],"/var/www/mentalInnov/Frontend/src/firebase.js",[],"/var/www/mentalInnov/Frontend/src/store.js",[],"/var/www/mentalInnov/Frontend/src/components/chat/Chat.js",["72","73","74","75","76","77"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\"\nimport { connect } from \"react-redux\";\nimport { userMessage, sendMessage } from \"../../actions/watson\";\nimport { useAuth } from \"../../contexts/AuthContext\"\nimport { db } from \"../../firebase\";\nimport {\n  collection,\n  addDoc,\n  doc,\n  updateDoc\n} from \"firebase/firestore\";\n\nconst Chat = ({ chat, userMessage, sendMessage }) => {\n  // Handle Users Message\n  const [message, setMessage] = useState(\"\");\n  const endOfMessages = useRef(null);\n  const { currentUser } = useAuth();\n  let id = '';\n  let chatHistory = '';\n  let lastMessage = '';\n\n  // const scrollToBottom = () => {\n  //   endOfMessages.current.scrollIntoView({ behavior: \"smooth\" });\n  //   console.log(\"user: \", currentUser.email)\n  //   console.log(\"last chat: \", chat[chat.length - 1])\n  // };\n  // useEffect(scrollToBottom, [chat]);\n\n  //  Function that handles user submission\n  const handleClick = async (e, chat) => {\n    const code = e.keyCode || e.which;    \n    if (code === 13) {\n      userMessage(message);\n      sendMessage(message);\n      setMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    const saveChatToDB = async () => {\n      const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get()\n      snapshot.forEach(doc => {\n        id = doc.id\n        chatHistory = doc.data().chatHistory\n      });\n      const userDoc = doc(db, \"accounts\", id);\n      if (chat[chat.length - 1]){\n        const newFields = { chatHistory: \n                            chatHistory + \"\\n\"\n                            + chat[chat.length - 1].type + \": \" + chat[chat.length - 1].message};\n        await updateDoc(userDoc, newFields);\n      }\n    };\n\n    const scrollToBottom = () => {\n      endOfMessages.current.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    saveChatToDB();\n    scrollToBottom();\n  }, [chat]);\n\n  return (\n    <div className=\"chat\">\n      <h1>Mental health chatbot</h1>\n\n      <div class=\"historyContainer\">\n        {chat.length === 0\n          ? \"\"\n          : chat.map((msg) => <div className={msg.type}>{msg.message}</div>)}\n        <div ref={endOfMessages}></div>\n\n      </div>\n\n      <input\n        id=\"chatBox\"\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={handleClick}\n        value={message}\n        placeholder=\"Please type your message here...\">\n      </input>      \n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  chat: state.watson.messages,\n});\n\nexport default connect(mapStateToProps, { userMessage, sendMessage })(Chat);\n","/var/www/mentalInnov/Frontend/src/actions/watson.js",[],"/var/www/mentalInnov/Frontend/src/actions/types.js",[],"/var/www/mentalInnov/Frontend/src/reducers/index.js",[],"/var/www/mentalInnov/Frontend/src/reducers/watson.js",["78"],"import {\n  INPUT_SUCCESS,\n  INPUT_FAIL,\n  SESSION_SUCCESS,\n  SESSION_FAIL,\n  MESSAGE_SUCCESS,\n  MESSAGE_FAIL,\n} from \"../actions/types\";\n\nconst initialState = {\n  messages: [],\n};\n\n// State updates\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  let { messages } = state;\n\n  switch (type) {\n    case INPUT_SUCCESS:\n      messages = [...messages, { message: payload, type: \"user\" }];\n      return {\n        ...state,\n        messages,\n      };\n    case INPUT_FAIL:\n      return {\n        ...state,\n      };\n    case SESSION_SUCCESS:\n      localStorage.removeItem(\"session\");\n      localStorage.setItem(\"session\", payload[\"session_id\"]);\n      return {\n        ...state,\n      };\n    case SESSION_FAIL:\n      return {\n        ...state,\n      };\n    case MESSAGE_SUCCESS:\n      messages = [...messages, { message: payload, type: \"bot\" }];\n      return {\n        ...state,\n        messages,\n      };\n    case MESSAGE_FAIL:\n      return {\n        ...state,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n",{"ruleId":"79","severity":1,"message":"80","line":42,"column":7,"nodeType":"81","messageId":"82","endLine":42,"endColumn":14},{"ruleId":"79","severity":1,"message":"83","line":59,"column":7,"nodeType":"81","messageId":"82","endLine":59,"endColumn":12},{"ruleId":"84","severity":1,"message":"85","line":76,"column":14,"nodeType":"86","endLine":76,"endColumn":24},{"ruleId":"79","severity":1,"message":"87","line":84,"column":7,"nodeType":"81","messageId":"82","endLine":84,"endColumn":14},{"ruleId":"79","severity":1,"message":"88","line":15,"column":7,"nodeType":"81","messageId":"82","endLine":15,"endColumn":9},{"ruleId":"89","severity":1,"message":"90","line":63,"column":17,"nodeType":"91","messageId":"92","endLine":63,"endColumn":84,"fix":"93"},{"ruleId":"79","severity":1,"message":"94","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":16},{"ruleId":"79","severity":1,"message":"95","line":8,"column":3,"nodeType":"81","messageId":"82","endLine":8,"endColumn":13},{"ruleId":"79","severity":1,"message":"96","line":9,"column":3,"nodeType":"81","messageId":"82","endLine":9,"endColumn":9},{"ruleId":"79","severity":1,"message":"97","line":21,"column":7,"nodeType":"81","messageId":"82","endLine":21,"endColumn":18},{"ruleId":"84","severity":1,"message":"98","line":44,"column":14,"nodeType":"99","endLine":44,"endColumn":20},{"ruleId":"84","severity":1,"message":"100","line":45,"column":23,"nodeType":"99","endLine":45,"endColumn":45},{"ruleId":"101","severity":1,"message":"102","line":15,"column":1,"nodeType":"103","endLine":55,"endColumn":3},"no-unused-vars","'account' is assigned a value but never used.","Identifier","unusedVar","'email' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'time' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'seconds' is assigned a value but never used.","'id' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"104","text":"105"},"'Button' is defined but never used.","'collection' is defined but never used.","'addDoc' is defined but never used.","'lastMessage' is assigned a value but never used.","Assignments to the 'id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'chatHistory' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",[2181,2181]," rel=\"noreferrer\""]