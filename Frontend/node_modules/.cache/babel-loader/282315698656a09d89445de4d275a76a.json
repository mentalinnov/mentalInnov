{"ast":null,"code":"var _jsxFileName = \"/Users/Jadsaliba/Documents/GitHub/mentalInnov/mentalInnov/Frontend/src/components/Dashboard.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Container, Button, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useHistory } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport axios from \"axios\";\nimport { Web3Storage, File } from 'web3.storage/dist/bundle.esm.min.js';\nimport algosdk from 'algosdk';\nimport { useTimer } from 'react-timer-hook';\nimport { saveAs } from 'file-saver';\nimport store from \"../store\";\nimport Chat from \"./chat/Chat\";\nimport { createSession } from \"../actions/watson\";\nimport { db } from \"../firebase\";\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport \"../css/Dashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (localStorage.getItem(\"session\")) {\n  delete axios.defaults.headers.common[\"session_id\"];\n  axios.defaults.headers.common[\"session_id\"] = localStorage.getItem(\"session\");\n} else {\n  delete axios.defaults.headers.common[\"session_id\"];\n}\n\nconst token = process.env.REACT_APP_WEB3_STORAGE_TOKEN;\nconst client = new Web3Storage({\n  token\n}); // wallet details\n\nconst recoveredAccount = algosdk.mnemonicToSecretKey(process.env.REACT_APP_PASSPHRASE); // setup algod\n\nconst baseServer = process.env.REACT_APP_ALGO_SERVER;\nconst port = '';\nconst purestakeToken = {\n  'X-API-Key': process.env.REACT_APP_PURESTAKE_API_KEY\n};\nconst algodClient = new algosdk.Algodv2(purestakeToken, baseServer, port);\nconst account = {\n  addr: process.env.REACT_APP_WALLET_ADDRESS,\n  sk: new Uint8Array(process.env.REACT_APP_SK.split(','))\n};\nexport default function Dashboard() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [loadingSave, setLoadingSave] = useState(false);\n  const [loadingDownload, setLoadingDownload] = useState(false);\n  const [showTimerWarning, setShowTimerWarning] = useState(false);\n  const [timerExpired, setTimerExpired] = useState(false);\n  const [error, setError] = useState(\"\");\n  const {\n    currentUser,\n    logout\n  } = useAuth();\n  const history = useHistory();\n  var id = '';\n  var fname = '';\n  var lname = '';\n  var address = '';\n  var email = '';\n  var cidDB = '';\n  var chatHistory = ''; // set initial timer on page load: 5 mins == 300 seconds\n  // watson assistant chat session currently lasts 5 mins on the free version \n  // so need to retrieve a new session ID every 5 minutes\n\n  var time = new Date();\n  time.setSeconds(time.getSeconds() + 300);\n  useEffect(() => {\n    // if 5 mins passed\n    if (timerExpired) {\n      // create new session ID\n      store.dispatch(createSession()); // reset timer\n\n      setTimerExpired(false);\n      time = new Date();\n      time.setSeconds(time.getSeconds() + 300);\n      setShowTimerWarning(true);\n    }\n  });\n\n  function MyTimer(_ref) {\n    _s();\n\n    let {\n      expiryTimestamp\n    } = _ref;\n    const {\n      seconds\n    } = useTimer({\n      expiryTimestamp,\n      onExpire: () => setTimerExpired(true)\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s(MyTimer, \"gn8UzD42cOq+V9RQ5nB4na8/6YE=\", false, function () {\n    return [useTimer];\n  });\n\n  async function handleLogout() {\n    setError(\"\");\n\n    try {\n      await logout();\n      history.push(\"/login\");\n    } catch {\n      setError(\"Failed to log out\");\n    }\n  }\n\n  async function downloadUserDetails() {\n    // Get user details from DB\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get();\n    snapshot.forEach(doc => {\n      id = doc.id;\n      fname = doc.data().first_name;\n      lname = doc.data().last_name;\n      address = doc.data().address;\n      email = doc.data().email;\n    }); // Create user details file\n\n    var userDetails = new Blob([`First Name: ${fname}, Last Name: ${lname}, Address: ${address}`], {\n      type: \"text/plain;charset=utf-8;\"\n    }); // Download user details file\n\n    saveAs(userDetails, \"userDetails.txt\");\n  }\n\n  async function createChatHistoryFile() {\n    // Get chat history from DB\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get();\n    snapshot.forEach(doc => {\n      id = doc.id;\n      chatHistory = doc.data().chatHistory;\n    }); // Create chat history file\n\n    const buffer = Buffer.from(chatHistory);\n    const files = [new File([buffer], 'chatHistory.txt')];\n    return files;\n  }\n\n  async function saveToAlgorand() {\n    setLoadingSave(true); // Push file to IPFS via web3storage\n\n    const file = await createChatHistoryFile();\n    const cid = await client.put(file);\n    console.log(\"File CID:\", cid); // Save cid as a note to send with transaction\n\n    const fileMetadata = {\n      cid: `${cid}`,\n      filename: './chatHistory.txt'\n    };\n    let note = algosdk.encodeObj(fileMetadata); // Fill cid field of user in DB\n\n    const userDoc = doc(db, \"accounts\", id);\n    const newFields = {\n      cid: cid\n    };\n    await updateDoc(userDoc, newFields); // Transaction to self with transaction note containing CID\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = 1000;\n    params.flatFee = true;\n    let txn = algosdk.makePaymentTxnWithSuggestedParams(process.env.REACT_APP_WALLET_ADDRESS, process.env.REACT_APP_WALLET_ADDRESS, 0, undefined, note, params); // Sign & send transaction\n\n    let signedTxn = txn.signTxn(recoveredAccount.sk);\n    let txId = txn.txID().toString();\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn).do(); // Confirmation\n\n    let status = await algodClient.status().do();\n    let lastRound = status[\"last-round\"];\n\n    while (true) {\n      const pendingInfo = await algodClient.pendingTransactionInformation(txId).do();\n\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n        break;\n      }\n\n      lastRound++;\n      await algodClient.statusAfterBlock(lastRound).do();\n    } // Read transaction from Algorand\n\n\n    let confirmedTxn = await algodClient.pendingTransactionInformation(txId).do();\n    console.log(\"Transaction information: %o\", confirmedTxn.txn.txn);\n    console.log(\"Decoded note: %s\", algosdk.decodeObj(confirmedTxn.txn.txn.note));\n    console.log('File push complete!');\n    setLoadingSave(false);\n  }\n\n  async function downloadFromAlgorand() {\n    setLoadingDownload(true);\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get();\n    snapshot.forEach(doc => {\n      cidDB = doc.data().cid;\n    }); // Get file from IPFS\n\n    const res = await client.get(cidDB);\n    const files = await res.files();\n    console.log(`IPFS url: https://${cidDB}.ipfs.dweb.link`);\n    console.log(\"Displaying files in IPFS storage:\");\n\n    for (const file of files) {\n      console.log(`${file.cid}: ${file.name} (${file.size} bytes)`);\n    } // Download File\n\n\n    fetch(`https://${cidDB}.ipfs.dweb.link/chatHistory.txt`).then(response => {\n      response.blob().then(blob => {\n        let url = window.URL.createObjectURL(blob);\n        let a = document.createElement('a');\n        a.href = url;\n        a.download = 'chatHistory.txt';\n        a.click();\n      });\n    });\n    setLoadingDownload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"fixed-top \",\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: [/*#__PURE__*/_jsxDEV(Alert, {\n        className: \"text-center align-items-center\",\n        show: showTimerWarning,\n        variant: \"warning\",\n        children: \"5 minutes have passed, a new session has been created!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        className: \"text-center align-items-center\",\n        show: !showTimerWarning,\n        variant: \"warning\",\n        children: \"Important: chatbot sessions currently only last for 5 minutes. After that, a new session will be created.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MyTimer, {\n          expiryTimestamp: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"align-items-right\",\n        style: {\n          display: 'flex',\n          justifyContent: 'right'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" text-right mr-3 mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-primary\",\n            onClick: downloadUserDetails,\n            children: \"Download user details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" text-right mr-3 mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: loadingSave,\n            variant: \"outline-primary\",\n            onClick: saveToAlgorand,\n            children: \"Save chat to Algorand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" text-right mr-3 mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: loadingDownload,\n            variant: \"outline-primary\",\n            onClick: downloadFromAlgorand,\n            children: \"Download chat from Algorand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-right mr-3 mt-3\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-danger\",\n            onClick: handleLogout,\n            children: \"Log Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Dashboard, \"I1mCkgXH0N43YcDLXICCOY/YkIQ=\", false, function () {\n  return [useAuth, useHistory];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/Jadsaliba/Documents/GitHub/mentalInnov/mentalInnov/Frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","Row","Container","Button","Alert","useAuth","useHistory","Provider","axios","Web3Storage","File","algosdk","useTimer","saveAs","store","Chat","createSession","db","doc","updateDoc","localStorage","getItem","defaults","headers","common","token","process","env","REACT_APP_WEB3_STORAGE_TOKEN","client","recoveredAccount","mnemonicToSecretKey","REACT_APP_PASSPHRASE","baseServer","REACT_APP_ALGO_SERVER","port","purestakeToken","REACT_APP_PURESTAKE_API_KEY","algodClient","Algodv2","account","addr","REACT_APP_WALLET_ADDRESS","sk","Uint8Array","REACT_APP_SK","split","Dashboard","loadingSave","setLoadingSave","loadingDownload","setLoadingDownload","showTimerWarning","setShowTimerWarning","timerExpired","setTimerExpired","error","setError","currentUser","logout","history","id","fname","lname","address","email","cidDB","chatHistory","time","Date","setSeconds","getSeconds","dispatch","MyTimer","expiryTimestamp","seconds","onExpire","textAlign","handleLogout","push","downloadUserDetails","snapshot","collection","where","get","forEach","data","first_name","last_name","userDetails","Blob","type","createChatHistoryFile","buffer","Buffer","from","files","saveToAlgorand","file","cid","put","console","log","fileMetadata","filename","note","encodeObj","userDoc","newFields","params","getTransactionParams","do","fee","flatFee","txn","makePaymentTxnWithSuggestedParams","undefined","signedTxn","signTxn","txId","txID","toString","sendRawTransaction","status","lastRound","pendingInfo","pendingTransactionInformation","statusAfterBlock","confirmedTxn","decodeObj","downloadFromAlgorand","res","name","size","fetch","then","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Row, Container, Button, Alert } from \"react-bootstrap\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport { useHistory } from \"react-router-dom\"\nimport { Provider } from \"react-redux\";\nimport axios from \"axios\";\nimport { Web3Storage, File } from 'web3.storage/dist/bundle.esm.min.js'\nimport algosdk from 'algosdk'\nimport { useTimer } from 'react-timer-hook';\nimport { saveAs } from 'file-saver';\nimport store from \"../store\";\nimport Chat from \"./chat/Chat\";\nimport { createSession } from \"../actions/watson\";\nimport { db } from \"../firebase\";\nimport {\n  doc,\n  updateDoc\n} from \"firebase/firestore\";\nimport \"../css/Dashboard.css\";\n\nif (localStorage.getItem(\"session\")) {\n  delete axios.defaults.headers.common[\"session_id\"];\n  axios.defaults.headers.common[\"session_id\"] = localStorage.getItem(\"session\");\n}\nelse {\n  delete axios.defaults.headers.common[\"session_id\"];\n}\n\nconst token = process.env.REACT_APP_WEB3_STORAGE_TOKEN\nconst client = new Web3Storage({ token })\n\n// wallet details\nconst recoveredAccount = algosdk.mnemonicToSecretKey(process.env.REACT_APP_PASSPHRASE);\n\n// setup algod\nconst baseServer = process.env.REACT_APP_ALGO_SERVER;\nconst port = '';\nconst purestakeToken = {\n   'X-API-Key': process.env.REACT_APP_PURESTAKE_API_KEY\n}\nconst algodClient = new algosdk.Algodv2(purestakeToken, baseServer, port);\nconst account = {\n    addr: process.env.REACT_APP_WALLET_ADDRESS,\n    sk: new Uint8Array(process.env.REACT_APP_SK.split(','))\n  }\n\nexport default function Dashboard() {\n  const [loadingSave, setLoadingSave] = useState(false)\n  const [loadingDownload, setLoadingDownload] = useState(false)\n  const [showTimerWarning, setShowTimerWarning] = useState(false);\n  const [timerExpired, setTimerExpired] = useState(false);\n  const [error, setError] = useState(\"\")\n  const { currentUser, logout } = useAuth()\n  const history = useHistory()\n  var id = ''\n  var fname = ''\n  var lname = ''\n  var address = ''\n  var email = ''\n  var cidDB = ''\n  var chatHistory = ''\n\n  // set initial timer on page load: 5 mins == 300 seconds\n  // watson assistant chat session currently lasts 5 mins on the free version \n  // so need to retrieve a new session ID every 5 minutes\n  var time = new Date();\n  time.setSeconds(time.getSeconds() + 300);\n\n  useEffect(() => {\n    // if 5 mins passed\n    if (timerExpired) {\n      // create new session ID\n      store.dispatch(createSession());\n      // reset timer\n      setTimerExpired(false)\n      time = new Date();\n      time.setSeconds(time.getSeconds() + 300);\n      setShowTimerWarning(true)\n    }\n  });\n\n  function MyTimer({ expiryTimestamp }) {\n    const {\n      seconds,\n    } = useTimer({ expiryTimestamp, onExpire: () => setTimerExpired(true) });\n  \n    return (\n      <div style={{textAlign: 'center'}}>\n\n      </div>\n    );\n  }\n\n  async function handleLogout() {\n    setError(\"\")\n    try {\n      await logout()\n      history.push(\"/login\")\n    } catch {\n      setError(\"Failed to log out\")\n    }\n  }\n\n  async function downloadUserDetails() {\n    // Get user details from DB\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get()\n    snapshot.forEach(doc => {\n      id = doc.id\n      fname = doc.data().first_name\n      lname = doc.data().last_name\n      address = doc.data().address\n      email = doc.data().email\n    });\n    // Create user details file\n    var userDetails = new Blob([`First Name: ${fname}, Last Name: ${lname}, Address: ${address}`], {\n      type: \"text/plain;charset=utf-8;\",\n    });\n    // Download user details file\n    saveAs(userDetails, \"userDetails.txt\");\n  }\n\n  async function createChatHistoryFile() {\n    // Get chat history from DB\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get()\n    snapshot.forEach(doc => {\n      id = doc.id\n      chatHistory = doc.data().chatHistory\n    });\n    // Create chat history file\n    const buffer = Buffer.from(chatHistory);\n    const files = [\n      new File([buffer], 'chatHistory.txt')\n    ]\n    return files\n  }\n\n  async function saveToAlgorand() {\n    setLoadingSave(true)\n    // Push file to IPFS via web3storage\n    const file = await createChatHistoryFile()\n    const cid = await client.put(file)\n    console.log(\"File CID:\", cid)\n\n    // Save cid as a note to send with transaction\n    const fileMetadata = {\n      cid: `${cid}`,\n      filename: './chatHistory.txt'\n    }\n    let note = algosdk.encodeObj(fileMetadata)\n\n    // Fill cid field of user in DB\n    const userDoc = doc(db, \"accounts\", id);\n    const newFields = { cid: cid};\n    await updateDoc(userDoc, newFields);\n\n    // Transaction to self with transaction note containing CID\n    let params = await algodClient.getTransactionParams().do()\n    params.fee = 1000\n    params.flatFee = true\n    let txn = algosdk.makePaymentTxnWithSuggestedParams(\n                        process.env.REACT_APP_WALLET_ADDRESS, \n                        process.env.REACT_APP_WALLET_ADDRESS, \n                        0, \n                        undefined,\n                        note, \n                        params)\n\n    // Sign & send transaction\n    let signedTxn = txn.signTxn(recoveredAccount.sk)\n    let txId = txn.txID().toString()\n    console.log(\"Signed transaction with txID: %s\", txId)\n    await algodClient.sendRawTransaction(signedTxn).do()\n\n    // Confirmation\n    let status = await algodClient.status().do()\n    let lastRound = status[\"last-round\"]\n    while (true) {\n      const pendingInfo = await algodClient.pendingTransactionInformation(txId).do()\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"])\n        break\n      }\n      lastRound++\n      await algodClient.statusAfterBlock(lastRound).do()\n    }\n\n    // Read transaction from Algorand\n    let confirmedTxn = await algodClient.pendingTransactionInformation(txId).do()\n    console.log(\"Transaction information: %o\", confirmedTxn.txn.txn)\n    console.log(\"Decoded note: %s\", algosdk.decodeObj(confirmedTxn.txn.txn.note))\n    console.log('File push complete!')\n\n    setLoadingSave(false)\n  }\n\n  async function downloadFromAlgorand() {\n    setLoadingDownload(true)\n    const snapshot = await db.collection('accounts').where('email', '==', currentUser.email).get()\n    snapshot.forEach(doc => {\n      cidDB = doc.data().cid\n    });\n\n    // Get file from IPFS\n    const res = await client.get(cidDB)\n    const files = await res.files()\n    console.log(`IPFS url: https://${cidDB}.ipfs.dweb.link`)\n    console.log(\"Displaying files in IPFS storage:\")\n    for (const file of files) {\n      console.log(`${file.cid}: ${file.name} (${file.size} bytes)`)\n    }\n    // Download File\n    fetch(`https://${cidDB}.ipfs.dweb.link/chatHistory.txt`)\n      .then(response => {\n          response.blob().then(blob => {\n              let url = window.URL.createObjectURL(blob);\n              let a = document.createElement('a');\n              a.href = url;\n              a.download = 'chatHistory.txt';\n              a.click();\n          });\n    });\n    setLoadingDownload(false)\n  }\n\n  return (\n    <Container className=\"fixed-top \">\n      {error && <Alert variant=\"danger\">{error}</Alert>}\n      \n      <Provider store={store}>\n        {/* <h2 className=\"text-right mr-3 mt-3\" style={{fontSize:\"22px\"}}> {currentUser.email}</h2>  */}\n        {/* show alert for session time */}\n        <Alert className=\"text-center align-items-center\" show={showTimerWarning} variant='warning'> \n            5 minutes have passed, a new session has been created!\n        </Alert>\n        <Alert className=\"text-center align-items-center\" show={!showTimerWarning} variant='warning'> \n            Important: chatbot sessions currently only last for 5 minutes. After that, a new session will be created.\n        </Alert>\n        {/* run timer */}\n        <div>\n          <MyTimer expiryTimestamp={time} />\n        </div>\n\n        {/* Chat container */}\n        <div className=\"container\">\n          <Chat />\n        </div>\n        \n        {/* Save & Download buttons */}\n        <Row className=\"align-items-right\" style={{display:'flex', justifyContent:'right'}}> \n          <div className=\" text-right mr-3 mt-3\">\n            <Button variant=\"outline-primary\" onClick={downloadUserDetails}>\n              Download user details\n            </Button>\n          </div>\n          <div className=\" text-right mr-3 mt-3\">\n            <Button disabled={loadingSave} variant=\"outline-primary\" onClick={saveToAlgorand}>\n              Save chat to Algorand\n            </Button>\n          </div>\n          <div className=\" text-right mr-3 mt-3\">\n            <Button disabled={loadingDownload} variant=\"outline-primary\" onClick={downloadFromAlgorand}>\n              Download chat from Algorand\n            </Button>\n          </div>\n          <div className=\"text-right mr-3 mt-3\">\n            <Button variant=\"outline-danger\" onClick={handleLogout}>\n              Log Out\n            </Button>\n          </div>\n        </Row>\n      </Provider>\n    </Container>  \n  )\n}\n"]},"metadata":{},"sourceType":"module"}